// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StrategyGame.Data;

#nullable disable

namespace StrategyGame.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250520055955_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StrategyGame.Data.Models.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackerId")
                        .HasColumnType("int");

                    b.Property<int>("DefenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttackerId");

                    b.HasIndex("DefenderId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.BattleUnit", b =>
                {
                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BattleId", "UnitId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UnitId");

                    b.ToTable("BattleUnits");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildTime")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildTime = 60,
                            Description = "Trains infantry.",
                            FactionId = 1,
                            Name = "Barracks"
                        },
                        new
                        {
                            Id = 2,
                            BuildTime = 30,
                            Description = "Produces food.",
                            FactionId = 1,
                            Name = "Farm"
                        });
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Factions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Balanced race with strong economy.",
                            Name = "Humans"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Strong melee units, weak defenses.",
                            Name = "Orcs"
                        });
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeX")
                        .HasColumnType("int");

                    b.Property<int>("SizeY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A balanced map with hills and forests.",
                            Name = "Valley of Kings",
                            SizeX = 100,
                            SizeY = 100
                        });
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerBuilding", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BuiltAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "BuildingId");

                    b.HasIndex("BuildingId");

                    b.ToTable("PlayerBuildings");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerFaction", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PlayerId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("PlayerFactions");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerLocation", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("PlayerLocations");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerResource", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("PlayerResources");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerTechnology", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsResearched")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResearchedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlayerId", "TechnologyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("PlayerTechnologies");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerUnit", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("PlayerUnits");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Used for building and training.",
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Required for units to survive.",
                            Name = "Food"
                        });
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResearchTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Increases attack by 10%",
                            Name = "Advanced Metallurgy",
                            ResearchTime = 120
                        },
                        new
                        {
                            Id = 2,
                            Description = "Increases food production by 20%",
                            Name = "Efficient Farming",
                            ResearchTime = 90
                        });
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackPower")
                        .HasColumnType("int");

                    b.Property<int>("DefensePower")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttackPower = 10,
                            DefensePower = 5,
                            FactionId = 1,
                            Name = "Swordsman",
                            TrainingTime = 45
                        },
                        new
                        {
                            Id = 2,
                            AttackPower = 7,
                            DefensePower = 3,
                            FactionId = 1,
                            Name = "Archer",
                            TrainingTime = 30
                        });
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Battle", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Player", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Player", "Defender")
                        .WithMany()
                        .HasForeignKey("DefenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attacker");

                    b.Navigation("Defender");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.BattleUnit", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Battle", "Battle")
                        .WithMany("BattleUnits")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("Player");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Building", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Faction", "Faction")
                        .WithMany("Buildings")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerBuilding", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany("PlayerBuildings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerFaction", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany("PlayerFactions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerLocation", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany("PlayerLocations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerResource", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany("PlayerResources")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerTechnology", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany("PlayerTechnologies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.PlayerUnit", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Player", "Player")
                        .WithMany("PlayerUnits")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Unit", b =>
                {
                    b.HasOne("StrategyGame.Data.Models.Faction", "Faction")
                        .WithMany("Units")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Battle", b =>
                {
                    b.Navigation("BattleUnits");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Faction", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("StrategyGame.Data.Models.Player", b =>
                {
                    b.Navigation("PlayerBuildings");

                    b.Navigation("PlayerFactions");

                    b.Navigation("PlayerLocations");

                    b.Navigation("PlayerResources");

                    b.Navigation("PlayerTechnologies");

                    b.Navigation("PlayerUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
